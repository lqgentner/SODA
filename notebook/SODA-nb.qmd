---
title: "SODA: Spain Occupational Accident Data Analysis"
subtitle: "A Project of the UPC ESEIAAT Business Analytics Course"
author: "Luis Gentner"
toc: true
date: today
format:
  html:
    embed-resources: true
    df-print: "paged"
    toc: true
editor: visual
---

```{r}
#| echo: false
#| message: false
library(conflicted)
library(tidyverse)
library(tidymodels)
library(vip)
library(corrr)
library(scales)
library(ggrepel)
library(mapSpain)
library(ESdata)

conflicts_prefer(
  dplyr::filter(),
  dplyr::select(),
  dplyr::lag()
)

theme_set(theme_minimal())
```

# Introduction

This report covers the analysis of work accidents, also known as occupational accidents, in Spain. The relative amount of work accidents is examined per autonomous community (AC) and per sector. Furthermore, the influence of multiple economic indicators on the accident rate is investigated.

# Data Exploration

The data is obtained from a [database](https://www.mites.gob.es/estadisticas/eat/welcome.htm) of the Spanish Ministry of Labor and Social Security. The index is used is called "ATR-I.1.3", which lists the work accidents per 100.000 workers in a given year, sector and autonomous community. The data is available for the years 2009 to 2021. From 2009 to 2019, the series that was recalculated after the current counting method was used. The data is already cleaned and converted into a long format, which was performed in the file [`atr_data_cleaning.R`](../data/atr_data_cleaning.R).

## Work accidents per sector

First, we look at the time series of work accidents per sector.

```{r}
load("../data/atr_clean.RData")
atr |>
  filter(ccaa == "ES") |>
  ggplot(aes(x = date, y = accidents, color = sector_en)) +
  geom_line() +
  geom_point(size=2) +
  scale_x_date(date_minor_breaks = "years") +
    labs(x = "Year", color = "Sector",
         y = "Work accidents per 100k workers",
         title = "Work accidents in Spain from 2009 to 2021")
```

Averaged over the years, the accidents in the construction sector are the highest, being about twice over the total across all sectors. The service sector has the lowest number of work accidents. While the work accidents in 2021 are less than in 2009 and were falling sharply between 20019 and 2011, there was a steady rise between 2012 and 2019. In 2019, this trend was reversed, coinciding with the economic recession during the COVID-19 pandemic.

## Work accidents per autonomous community

Next we can look at the work accidents per AC in the most recent available year:

```{r}
atr |>
  filter(sector == "total",
         year == 2021) |>
  ggplot(aes(x = accidents, y = fct_reorder(ccaa_name, accidents))) +
  geom_col() +
  labs(x = "Work accidents per 100k workers",
       y = NULL,
       title = "Work accidents in 2021 per autonomous community")
```

The Balearics, Castilla - La Mancha, and Foral de Navarra have the highest number of accidents per worker, while Catalonia, the Canaries, and Madrid are on the other end of the scale. We try to find possible reasons for this later.

### Map plot

We can also print the accidents per AC on a Map. This plot is mainly intended for the Shiny app.

```{r}
#| warning: false

# Get Spanish ACs as simple features
ccaa <- esp_get_ccaa()
can_box <- esp_get_can_box()

atr_2021 <- atr |>
  filter(year == 2021,
         ccaa != "ES",
         sector == "total") |>
  mutate(ccaa = as.character(ccaa))

# Join SF and work accidents data
ccaa_atr <- ccaa |>
  inner_join(atr_2021, by = join_by(iso2.ccaa.code == ccaa))

ggplot(ccaa_atr) +
  # Plot ACs
  geom_sf(aes(fill = accidents),
          color = "grey70",
          linewidth = .3) +
  # Plot canaries box
  geom_sf(data = can_box, color = "grey70") +
  # Plot labels with accident number
  geom_label_repel(
    aes(label = round(accidents), geometry = geometry),
    stat = "sf_coordinates",
    fill = alpha(c("white"), 0.5),
    color = "black",
    size = 3,
    label.size = 0
  ) +
  # Adjust color scale
  scale_fill_distiller(palette = "Blues", direction = 1) +
  theme_void() +
  theme(legend.position = c(0.12, 0.6)) +
  labs(x = NULL,
       y = NULL,
       title = "Work accidents in 2021 per autonomous community",
       fill = "Accidents per\n100k workers")
```

## Annual change rate

We can derive the annual change rate of work accidents from the accident number, by divding the difference from the last year by last year's accident rate:

```{r}
atr <- atr |>
  # Annual change rate
  mutate(acc_yoy = (accidents - lag(accidents)) / lag(accidents),
         .by = c(sector, ccaa)) |>
  # Numeric year column
  mutate(year = year(date))
```

```{r}
atr |>
  filter(ccaa == "ES") |>
  drop_na() |>
  ggplot(aes(x = date, y = acc_yoy, color = sector_en)) +
  geom_hline(yintercept = 0, linetype = "dashed", color = "gray50") +
  geom_line() +
  geom_point() +
  scale_x_date(date_minor_breaks = "years") +
  scale_y_continuous(labels = label_percent()) +
  labs(x = "Year", color = "Sector",
       y = "Year over year change",
       title = "Work accidents in Spain from 2009 to 2021")
```

The sharp decline and rise before and after the pandemic is even more apparent here.

```{r}
#| echo: false
# Save data for use in dashboard
save(atr, file = "../dashboard/atr_joined.RData")
```

# Comparison with economic data

Next, we find and engineer economic features which might correlate with the work accident rate. All variables are extracted from the [`ESdata`](https://github.com/jmsallan/ESdata) package by Jose M Sallan.

## Working population

### Absolute working population

We start by looking at the active working population. This data is available per sector and per AC in all required years.

```{r}
wpop <- epa_sector |>
  filter(edad == "total",
         sexo == "total") |>
  select(-edad, -sexo) |>
  rename(wpop = valor)
wpop |>
  filter(region == "ES") |>
  ggplot(aes(x = periodo, y = wpop, color = sector)) +
  geom_line() +
  scale_x_date(date_minor_breaks = "years") +
  labs(x = "Year", y = "100k workers", color = "Sector",
       title = "Active working population in Spain")
```

### Working population per sector

We can calculate the relative working population per sector from this:

```{r}
# Add relative work pop per sector
wpop <- wpop |>
  mutate(wpop_rel = wpop / wpop[sector == "total"],
         .by = c(periodo, region))
# Plot
wpop |>
  filter(sector != "total",
         region == "ES") |>
  ggplot(aes(periodo,  wpop_rel, fill = sector)) +
  geom_area() +
  scale_x_date(date_minor_breaks = "years") +
  scale_y_continuous(labels = label_percent()) +
  labs(x = "Date", y = "Percentage", fill = "Sector",
       title = "Relative working population in Spain per sector")
```

The steady increase in the service sector is apparent.

We can also plot the data per autonomous community:

```{r}
wpop |>
  # Add full AC names
  left_join(ccaa_iso, by = join_by(region == iso)) |>
  filter(periodo == "2023-01-31",
         sector != "total",
         !region %in% c("ES-ML", "ES-CE")) |>
  ggplot(aes(x = wpop_rel, y = fct_rev(fct_reorder(nombres, wpop_rel)),
             fill = sector)) +
  geom_col() +
  scale_x_continuous(labels = label_percent()) +
  labs(x = "Percentage", y = NULL,
       title = "Relative working population per sector in 2023")
```

### Non-EU-working population

```{r}
wpop_noEU <- epa_nac |>
  # Only view all sexes and working population
  filter(sexo == "total",
         dato == "act") |>
  select(-sexo, -dato) |>
  # Compute relative amount of workforce per nationality
  mutate(wpop_noEU_rel = valor / valor[nac == "total"],
         .by = c(region, periodo)) |>
  # Only keep no-UE
  filter(nac == "no-UE") |>
  select(-valor, -nac)

wpop_noEU |> head()
```

Plot non-EU workforce per AC:

```{r}
wpop_noEU |>
  filter(periodo == "2023-01-31") |>
  # Add full AC names
  left_join(ccaa_iso, by = join_by(region == iso)) |>
  ggplot(aes(x = wpop_noEU_rel,
             y = fct_reorder(nombres, wpop_noEU_rel))) +
  geom_col() +
  scale_x_continuous(labels = label_percent()) +
  labs(x = "Percentage",
       y = NULL,
       title = "Non-EU working population in 2023")
```

## GDP

```{r}
agr = c("vab_A", "vab_BE", "vab_F", "vab_GT", "pib")
agr_rename = c(
  "agricultura" = "vab_A",
  "industria" = "vab_BE",
  "construccion" = "vab_F",
  "servicios" = "vab_GT",
  "total" = "pib"
)
gdp <- pib_pm_oferta |>
  filter(agregado %in% agr,
         dato %in% c("base", "var_anual"),
         ajuste == "ajustado") |>
  pivot_wider(names_from = c(tipo, dato), values_from = valor) |>
  mutate(month = month(periodo)) |>
  # Only use data from 06-30
  filter(month == 6) |>
  select(-nivel, -ajuste, -month) |>
  mutate(agregado = fct_recode(agregado, !!!agr_rename))
gdp |>
  ggplot(aes(periodo, indice_base, color = agregado)) +
  geom_line() +
  labs(x = "Year", y = "Indexed GDP",
       title = "Gross domestic product of Spain")

```

### Correlation analysis

To chose with which GDP value to go forward, I analyze the correlations between the accidents and GDP values. I only consider the whole country and the accidents over all sectors.

```{r}
#| message: false

# Join GDP and accident data
atr |>
  # Only consider whole country and total GDP
  filter(ccaa == "ES",
         sector == "total") |>
  select(date, sector, accidents, acc_yoy) |>
  left_join(gdp, by = join_by(date == periodo, sector == agregado)) |>
  correlate() |>
  focus(accidents, acc_yoy)
```

The indexed values show a higher correlation than the actual values. We choose keep both the base and annual variations of the indexed GDP.

```{r}
gdp <- gdp |>
  select(-starts_with("valor")) |>
  rename(gdp_idx = indice_base,
         gdp_idx_yoy = indice_var_anual)
```

## Inflation rate and consumer price index

```{r}
infl <- ipc_ccaa |>
  # Only extract annual inflation and price index over all groups
  filter(grupo == "general",
         dato %in% c("anual", "indice")) |>
  select(-grupo) |>
  pivot_wider(names_from = dato, values_from = valor) |>
  rename(infl_cpi = indice, infl_yoy = anual) |>
  # Annual inflation in decimal format
  mutate(infl_yoy = infl_yoy / 100)

infl |>
  filter(region == "ES") |>
  ggplot(aes(periodo, infl_yoy)) +
  geom_line() +
  scale_x_date(date_minor_breaks = "years") +
  scale_y_continuous(labels = label_percent()) +
  labs(x = "Year", y = "Percentage",
       title = "Annual inflation in Spain")
```

## Analysis of the influence of economic data using machine learning

#### Dataset joing

To DO GDP: Merging agregado with sectors...

```{r}
joined <- atr |>
  # Removing missing values
  drop_na() |>
  # Join with working population data
  left_join(wpop, by = join_by(date == periodo, sector, ccaa == region)) |>
  # Join with non-EU working population data
  left_join(wpop_noEU, by = join_by(date == periodo, ccaa == region)) |>
  # Join with GDP data
  left_join(gdp, by = join_by(date == periodo, sector == agregado)) |>
  # Join with inflation data
  left_join(infl, by = join_by(date == periodo, ccaa == region)) |>
  # Remove unneeded columns
  select(sector, ccaa, year, accidents, wpop:infl_yoy)
str(joined)
```

#### Recipe creation

Scaling the outcome variable (not possible within recipe):

)

```{r}
set.seed(3141)
joined <- joined |>
  # Scaling the outcome variable
  mutate(accidents = log(accidents, base = 10)) |>
  ## Prepare for later time split:
  # Shuffle rows
  slice_sample(prop = 1) |>
  # Sort after time
  arrange(year)

joined |> head()
```

```{r}
acc_split <- initial_time_split(joined, prop = 0.8)
acc_train <- training(acc_split)
acc_test <- testing(acc_split)

rec <- recipe(accidents ~ ., data = acc_split) |>
  step_naomit(all_predictors()) |>
  step_corr(all_numeric_predictors()) |>
  step_log(wpop, base = exp(1)) |>
  step_sqrt(wpop_noEU_rel) |>
  step_normalize(all_numeric_predictors()) |>
  step_dummy(all_nominal_predictors())

rec |> prep()
```

```{r}
# Checking the transformed dataset
rec |> prep() |> bake(new_data = NULL) |>
  select(year:accidents)  |>
  pivot_longer(cols = everything()) |>
  ggplot(aes(x = value)) +
  geom_density(na.rm = TRUE) +
  facet_wrap(vars(name), scales = "free") +
  labs(title = "Desnity estimate of the predictor and outcome variables")
```

#### Model creation and fitting

```{r}
acc_metrics <- metric_set(rmse, mae, rsq)

rf_mod <- rand_forest(trees = 500) |>
  set_mode("regression") |>
  set_engine("ranger", importance = "permutation")

set.seed(3141)
rf_mod_fit <- workflow() |>
  add_recipe(rec) |>
  add_model(rf_mod) |>
  fit(acc_train)
```

#### Performance evaluation

```{r}
rf_pred <- rf_mod_fit |>
  predict(acc_test) |>
  bind_cols(acc_test)
rf_pred |>
  acc_metrics(accidents, .pred) |>
  select(-.estimator)
```

```{r}
rf_pred |>
  ggplot(aes(x = accidents, y = .pred)) +
  geom_abline(linetype = "dashed", color = "gray80") +
  geom_point() +
  labs(x = "Truth",
       y = "Prediction",
       title = "Predictions of random forest on test set")
```

#### Variable importance

```{r}
rf_mod_fit |>
  extract_fit_parsnip() |>
  vip()
```

```{r}
sessionInfo()
```
